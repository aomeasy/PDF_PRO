import streamlit as st
import streamlit.components.v1 as components
from PyPDF2 import PdfReader, PdfWriter, PdfMerger
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader
from PIL import Image
import io
import json
import base64

# Import font module with error handling
try:
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfont import TTFont
    FONTS_AVAILABLE = True
except ImportError:
    FONTS_AVAILABLE = False

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="PDF Manager Pro - Interactive",
    page_icon="üìÑ",
    layout="wide"
)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç PDF ‡∏î‡πâ‡∏ß‡∏¢ text elements
def edit_pdf_with_elements(pdf_file, text_elements):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° text overlay"""
    reader = PdfReader(pdf_file)
    writer = PdfWriter()
    width, height = A4
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° elements ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤
    elements_by_page = {}
    for element in text_elements:
        page = element.get('page', 1)
        if page not in elements_by_page:
            elements_by_page[page] = []
        elements_by_page[page].append(element)
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
    for page_num, page in enumerate(reader.pages, start=1):
        if page_num in elements_by_page:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á overlay ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
            packet = io.BytesIO()
            can = canvas.Canvas(packet, pagesize=A4)
            
            for element in elements_by_page[page_num]:
                text = element.get('text', '')
                x = float(element.get('x', 50))
                y = float(element.get('y', 700))
                font_size = int(element.get('fontSize', 16))
                font_name = element.get('font', 'Helvetica')
                color = element.get('color', '#000000')
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏µ hex ‡πÄ‡∏õ‡πá‡∏ô RGB
                color = color.lstrip('#')
                r, g, b = tuple(int(color[i:i+2], 16)/255 for i in (0, 2, 4))
                can.setFillColorRGB(r, g, b)
                
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå
                try:
                    can.setFont(font_name, font_size)
                except:
                    can.setFont('Helvetica', font_size)
                
                # ‡πÅ‡∏õ‡∏•‡∏á y coordinate (PDF ‡πÉ‡∏ä‡πâ bottom-left ‡πÄ‡∏õ‡πá‡∏ô origin)
                y_pdf = height - y - font_size
                can.drawString(x, y_pdf, text)
            
            can.save()
            packet.seek(0)
            
            # ‡∏£‡∏ß‡∏° overlay ‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            overlay_pdf = PdfReader(packet)
            page.merge_page(overlay_pdf.pages[0])
        
        writer.add_page(page)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á output
    output = io.BytesIO()
    writer.write(output)
    output.seek(0)
    return output

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Interactive Editor Component
def interactive_pdf_editor():
    """‡πÅ‡∏™‡∏î‡∏á Interactive PDF Editor"""
    
    html_code = """
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body {
                font-family: 'Segoe UI', sans-serif;
                background: #f5f5f5;
                padding: 20px;
            }
            .editor-container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            .toolbar {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                padding: 20px;
                border-radius: 10px 10px 0 0;
                color: white;
            }
            .toolbar h2 { margin-bottom: 15px; }
            .controls {
                display: grid;
                grid-template-columns: 1fr 1fr 1fr;
                gap: 10px;
                margin-bottom: 15px;
            }
            .controls input, .controls select {
                padding: 8px;
                border: none;
                border-radius: 5px;
                font-size: 14px;
            }
            textarea {
                width: 100%;
                padding: 10px;
                border: none;
                border-radius: 5px;
                resize: vertical;
                min-height: 60px;
                font-family: inherit;
            }
            .btn {
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-weight: 600;
                transition: all 0.3s;
            }
            .btn-add {
                background: white;
                color: #667eea;
                width: 100%;
                margin-top: 10px;
            }
            .btn-add:hover {
                background: #f0f0f0;
            }
            .btn-save {
                background: #28a745;
                color: white;
                width: 100%;
                margin-top: 10px;
            }
            .btn-clear {
                background: #dc3545;
                color: white;
                width: 100%;
            }
            .canvas-wrapper {
                padding: 20px;
                min-height: 600px;
            }
            #canvas {
                width: 595px;
                height: 842px;
                border: 2px solid #ddd;
                margin: 0 auto;
                position: relative;
                background: white;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            }
            .text-element {
                position: absolute;
                cursor: move;
                padding: 5px;
                border: 2px dashed transparent;
                user-select: none;
                white-space: pre-wrap;
                word-wrap: break-word;
            }
            .text-element:hover {
                border-color: #667eea;
                background: rgba(102, 126, 234, 0.1);
            }
            .text-element.selected {
                border-color: #667eea;
                background: rgba(102, 126, 234, 0.15);
            }
            .delete-btn {
                position: absolute;
                top: -12px;
                right: -12px;
                width: 24px;
                height: 24px;
                background: #dc3545;
                color: white;
                border: none;
                border-radius: 50%;
                cursor: pointer;
                display: none;
                font-size: 14px;
                line-height: 1;
            }
            .text-element:hover .delete-btn {
                display: block;
            }
            .resize-handle {
                position: absolute;
                bottom: -5px;
                right: -5px;
                width: 12px;
                height: 12px;
                background: #667eea;
                cursor: nwse-resize;
                border-radius: 50%;
                display: none;
            }
            .text-element:hover .resize-handle {
                display: block;
            }
            .info-box {
                background: #e7f3ff;
                padding: 15px;
                border-radius: 5px;
                margin-bottom: 15px;
                border-left: 4px solid #667eea;
            }
        </style>
    </head>
    <body>
        <div class="editor-container">
            <div class="toolbar">
                <h2>‚úèÔ∏è PDF Interactive Editor</h2>
                <div class="info-box">
                    üí° <strong>‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:</strong> ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡∏Å‡∏î "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" ‚Üí ‡∏•‡∏≤‡∏Å‡∏ß‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‚Üí ‡∏•‡∏≤‡∏Å‡∏°‡∏∏‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
                </div>
                
                <textarea id="textInput" placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°..."></textarea>
                
                <div class="controls">
                    <select id="fontSelect">
                        <option value="Arial">Arial</option>
                        <option value="Helvetica">Helvetica</option>
                        <option value="Times New Roman">Times</option>
                        <option value="Courier New">Courier</option>
                    </select>
                    <input type="number" id="fontSize" value="16" min="8" max="72" placeholder="‡∏Ç‡∏ô‡∏≤‡∏î">
                    <input type="color" id="textColor" value="#000000">
                </div>
                
                <button class="btn btn-add" onclick="addText()">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</button>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                    <button class="btn btn-clear" onclick="clearAll()">üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</button>
                    <button class="btn btn-save" onclick="savePDF()">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á PDF</button>
                </div>
            </div>
            
            <div class="canvas-wrapper">
                <div id="canvas"></div>
            </div>
        </div>

        <script>
            let textElements = [];
            let elementCounter = 0;
            let selectedElement = null;
            let isDragging = false;
            let isResizing = false;
            let startX, startY, startLeft, startTop, startFontSize;

            function addText() {
                const text = document.getElementById('textInput').value;
                if (!text.trim()) {
                    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
                    return;
                }

                const element = {
                    id: ++elementCounter,
                    text: text,
                    x: 50,
                    y: 50,
                    fontSize: parseInt(document.getElementById('fontSize').value),
                    font: document.getElementById('fontSelect').value,
                    color: document.getElementById('textColor').value,
                    page: 1
                };

                textElements.push(element);
                createTextElement(element);
                document.getElementById('textInput').value = '';
            }

            function createTextElement(el) {
                const canvas = document.getElementById('canvas');
                const div = document.createElement('div');
                div.className = 'text-element';
                div.id = 'text-' + el.id;
                div.style.left = el.x + 'px';
                div.style.top = el.y + 'px';
                div.style.fontSize = el.fontSize + 'px';
                div.style.fontFamily = el.font;
                div.style.color = el.color;
                div.textContent = el.text;

                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'delete-btn';
                deleteBtn.textContent = '√ó';
                deleteBtn.onclick = (e) => {
                    e.stopPropagation();
                    deleteText(el.id);
                };
                div.appendChild(deleteBtn);

                const resizeHandle = document.createElement('div');
                resizeHandle.className = 'resize-handle';
                div.appendChild(resizeHandle);

                div.addEventListener('mousedown', (e) => startDrag(e, el));
                resizeHandle.addEventListener('mousedown', (e) => startResize(e, el));

                canvas.appendChild(div);
            }

            function startDrag(e, el) {
                if (e.target.className === 'resize-handle') return;
                selectedElement = el;
                isDragging = true;
                startX = e.clientX;
                startY = e.clientY;
                startLeft = el.x;
                startTop = el.y;
                
                const div = document.getElementById('text-' + el.id);
                div.classList.add('selected');
            }

            function startResize(e, el) {
                e.stopPropagation();
                selectedElement = el;
                isResizing = true;
                startY = e.clientY;
                startFontSize = el.fontSize;
            }

            document.addEventListener('mousemove', (e) => {
                if (isDragging && selectedElement) {
                    const dx = e.clientX - startX;
                    const dy = e.clientY - startY;
                    
                    selectedElement.x = Math.max(0, Math.min(startLeft + dx, 550));
                    selectedElement.y = Math.max(0, Math.min(startTop + dy, 800));
                    
                    const div = document.getElementById('text-' + selectedElement.id);
                    div.style.left = selectedElement.x + 'px';
                    div.style.top = selectedElement.y + 'px';
                }
                
                if (isResizing && selectedElement) {
                    const dy = e.clientY - startY;
                    const newSize = Math.max(8, Math.min(72, startFontSize + dy));
                    
                    selectedElement.fontSize = newSize;
                    const div = document.getElementById('text-' + selectedElement.id);
                    div.style.fontSize = newSize + 'px';
                }
            });

            document.addEventListener('mouseup', () => {
                if (selectedElement) {
                    const div = document.getElementById('text-' + selectedElement.id);
                    div.classList.remove('selected');
                }
                isDragging = false;
                isResizing = false;
                selectedElement = null;
            });

            function deleteText(id) {
                textElements = textElements.filter(el => el.id !== id);
                const div = document.getElementById('text-' + id);
                if (div) div.remove();
            }

            function clearAll() {
                if (confirm('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?')) {
                    textElements = [];
                    document.getElementById('canvas').innerHTML = '';
                }
            }

            function savePDF() {
                if (textElements.length === 0) {
                    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô');
                    return;
                }
                
                // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Streamlit
                window.parent.postMessage({
                    type: 'pdf_data',
                    elements: textElements
                }, '*');
            }
        </script>
    </body>
    </html>
    """
    
    # ‡πÅ‡∏™‡∏î‡∏á component
    components.html(html_code, height=1000, scrolling=True)

# Main App
st.title("üìÑ PDF Manager Pro - Interactive Edition")

# Sidebar
feature = st.sidebar.radio(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô",
    ["‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç PDF (Interactive)", "üîó ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå PDF", "‚úÇÔ∏è ‡πÅ‡∏ö‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå PDF"]
)

# Interactive PDF Editor
if feature == "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç PDF (Interactive)":
    st.header("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç PDF ‡πÅ‡∏ö‡∏ö Interactive")
    
    uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF", type="pdf")
    
    if uploaded_file:
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô session state
        if 'pdf_file' not in st.session_state:
            st.session_state.pdf_file = uploaded_file
        
        st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {uploaded_file.name}")
        
        # ‡πÅ‡∏™‡∏î‡∏á Interactive Editor
        st.markdown("---")
        interactive_pdf_editor()
        
        # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JavaScript (‡πÉ‡∏ä‡πâ session state ‡πÅ‡∏ó‡∏ô)
        if 'text_elements' not in st.session_state:
            st.session_state.text_elements = []
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        if st.session_state.text_elements:
            st.markdown("---")
            st.subheader("üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
            st.json(st.session_state.text_elements)
            
            if st.button("üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ", type="primary"):
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PDF..."):
                    edited_pdf = edit_pdf_with_elements(
                        uploaded_file,
                        st.session_state.text_elements
                    )
                    
                    st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    st.download_button(
                        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF",
                        data=edited_pdf,
                        file_name="edited.pdf",
                        mime="application/pdf"
                    )
        
        # Manual input (fallback)
        with st.expander("üîß ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠"):
            text = st.text_area("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
            col1, col2, col3 = st.columns(3)
            with col1:
                x = st.number_input("X", 0, 600, 50)
            with col2:
                y = st.number_input("Y", 0, 800, 100)
            with col3:
                size = st.number_input("‡∏Ç‡∏ô‡∏≤‡∏î", 8, 72, 16)
            
            if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°"):
                if 'text_elements' not in st.session_state:
                    st.session_state.text_elements = []
                st.session_state.text_elements.append({
                    'text': text,
                    'x': x,
                    'y': y,
                    'fontSize': size,
                    'font': 'Helvetica',
                    'color': '#000000',
                    'page': 1
                })
                st.rerun()

# ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå PDF
elif feature == "üîó ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå PDF":
    st.header("‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢ PDF ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
    uploaded_files = st.file_uploader(
        "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF (‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)",
        type="pdf",
        accept_multiple_files=True
    )
    
    if uploaded_files and len(uploaded_files) > 1:
        if st.button("‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå"):
            from PyPDF2 import PdfMerger
            merger = PdfMerger()
            for pdf in uploaded_files:
                merger.append(pdf)
            
            output = io.BytesIO()
            merger.write(output)
            merger.close()
            output.seek(0)
            
            st.success("‚úÖ ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            st.download_button(
                "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î",
                data=output,
                file_name="merged.pdf",
                mime="application/pdf"
            )

# ‡πÅ‡∏ö‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå PDF  
elif feature == "‚úÇÔ∏è ‡πÅ‡∏ö‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå PDF":
    st.header("‡πÅ‡∏ö‡πà‡∏á PDF ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤")
    st.info("‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤...")
