import streamlit as st
from PyPDF2 import PdfReader, PdfWriter, PdfMerger
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader
from PIL import Image
import io
import os
import tempfile
import zipfile

# Import font module with error handling
try:
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfont import TTFont
    FONTS_AVAILABLE = True
except ImportError:
    FONTS_AVAILABLE = False

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="PDF Manager Pro",
    page_icon="üìÑ",
    layout="wide"
)

# CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á
st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stButton>button {
        width: 100%;
        background-color: #4CAF50;
        color: white;
        padding: 0.5rem;
        border-radius: 5px;
    }
    .success-box {
        padding: 1rem;
        background-color: #d4edda;
        border-radius: 5px;
        margin: 1rem 0;
    }
    </style>
""", unsafe_allow_html=True)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏° PDF
def merge_pdfs(pdf_files):
    merger = PdfMerger()
    for pdf in pdf_files:
        merger.append(pdf)
    
    output = io.BytesIO()
    merger.write(output)
    merger.close()
    output.seek(0)
    return output

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡πà‡∏á PDF
def split_pdf(pdf_file, page_ranges):
    reader = PdfReader(pdf_file)
    outputs = []
    
    for i, page_range in enumerate(page_ranges):
        writer = PdfWriter()
        start, end = page_range
        
        for page_num in range(start - 1, min(end, len(reader.pages))):
            writer.add_page(reader.pages[page_num])
        
        output = io.BytesIO()
        writer.write(output)
        output.seek(0)
        outputs.append((f"split_{i+1}.pdf", output))
    
    return outputs

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤ PDF
def extract_pages(pdf_file, pages_to_extract):
    reader = PdfReader(pdf_file)
    writer = PdfWriter()
    
    for page_num in pages_to_extract:
        if 0 < page_num <= len(reader.pages):
            writer.add_page(reader.pages[page_num - 1])
    
    output = io.BytesIO()
    writer.write(output)
    output.seek(0)
    return output

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
def create_pdf_with_content(text, font_name, font_size, image=None, image_position=None):
    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4
    
    # ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ü‡∏≠‡∏ô‡∏ï‡πå)
    try:
        if font_name == "TH Sarabun PSK":
            pdfmetrics.registerFont(TTFont('THSarabunPSK', 'fonts/THSarabunPSK.ttf'))
            c.setFont('THSarabunPSK', font_size)
        elif font_name == "TH Sarabun New":
            pdfmetrics.registerFont(TTFont('THSarabunNew', 'fonts/THSarabunNew.ttf'))
            c.setFont('THSarabunNew', font_size)
        else:
            c.setFont('Helvetica', font_size)
    except:
        c.setFont('Helvetica', font_size)
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ü‡∏≠‡∏ô‡∏ï‡πå ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡∏ô")
    
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    text_object = c.beginText(50, height - 100)
    for line in text.split('\n'):
        text_object.textLine(line)
    c.drawText(text_object)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    if image is not None:
        img = Image.open(image)
        img_width, img_height = img.size
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        max_width = 400
        max_height = 400
        ratio = min(max_width/img_width, max_height/img_height)
        new_width = img_width * ratio
        new_height = img_height * ratio
        
        if image_position:
            x, y = image_position
        else:
            x, y = 50, height - 300
        
        c.drawImage(ImageReader(image), x, y - new_height, 
                   width=new_width, height=new_height)
    
    c.save()
    buffer.seek(0)
    return buffer

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏∏‡∏ô PDF
def rotate_pdf(pdf_file, rotation_angle):
    reader = PdfReader(pdf_file)
    writer = PdfWriter()
    
    for page in reader.pages:
        page.rotate(rotation_angle)
        writer.add_page(page)
    
    output = io.BytesIO()
    writer.write(output)
    output.seek(0)
    return output

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤ PDF
def delete_pages(pdf_file, pages_to_delete):
    reader = PdfReader(pdf_file)
    writer = PdfWriter()
    
    for i, page in enumerate(reader.pages, 1):
        if i not in pages_to_delete:
            writer.add_page(page)
    
    output = io.BytesIO()
    writer.write(output)
    output.seek(0)
    return output

# Header
st.title("üìÑ PDF Manager Pro")
st.markdown("### ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå PDF ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")

# Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
st.sidebar.title("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô")
feature = st.sidebar.radio(
    "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£?",
    ["üîó ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå PDF", "‚úÇÔ∏è ‡πÅ‡∏ö‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå PDF", "üìã ‡∏ï‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤ PDF", 
     "üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏´‡∏°‡πà", "üîÑ ‡∏´‡∏°‡∏∏‡∏ô PDF", "üóëÔ∏è ‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤ PDF"]
)

# 1. ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå PDF
if feature == "üîó ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå PDF":
    st.header("‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢ PDF ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
    uploaded_files = st.file_uploader(
        "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)",
        type="pdf",
        accept_multiple_files=True,
        key="merge"
    )
    
    if uploaded_files and len(uploaded_files) > 1:
        st.info(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {len(uploaded_files)} ‡πÑ‡∏ü‡∏•‡πå")
        
        if st.button("‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå..."):
                merged_pdf = merge_pdfs(uploaded_files)
                st.success("‚úÖ ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß",
                    data=merged_pdf,
                    file_name="merged.pdf",
                    mime="application/pdf"
                )

# 2. ‡πÅ‡∏ö‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå PDF
elif feature == "‚úÇÔ∏è ‡πÅ‡∏ö‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå PDF":
    st.header("‡πÅ‡∏ö‡πà‡∏á PDF ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤")
    uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF", type="pdf", key="split")
    
    if uploaded_file:
        reader = PdfReader(uploaded_file)
        total_pages = len(reader.pages)
        st.info(f"‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ {total_pages} ‡∏´‡∏ô‡πâ‡∏≤")
        
        num_splits = st.number_input("‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô?", min_value=1, max_value=10, value=2)
        
        page_ranges = []
        cols = st.columns(num_splits)
        for i in range(num_splits):
            with cols[i]:
                st.write(f"**‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà {i+1}**")
                start = st.number_input(f"‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", min_value=1, max_value=total_pages, value=1, key=f"start_{i}")
                end = st.number_input(f"‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢", min_value=1, max_value=total_pages, value=total_pages, key=f"end_{i}")
                page_ranges.append((start, end))
        
        if st.button("‡πÅ‡∏ö‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏ö‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå..."):
                split_files = split_pdf(uploaded_file, page_ranges)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á ZIP file
                zip_buffer = io.BytesIO()
                with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                    for filename, file_data in split_files:
                        zip_file.writestr(filename, file_data.read())
                
                zip_buffer.seek(0)
                st.success("‚úÖ ‡πÅ‡∏ö‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (ZIP)",
                    data=zip_buffer,
                    file_name="split_pdfs.zip",
                    mime="application/zip"
                )

# 3. ‡∏ï‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤ PDF
elif feature == "üìã ‡∏ï‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤ PDF":
    st.header("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å PDF")
    uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF", type="pdf", key="extract")
    
    if uploaded_file:
        reader = PdfReader(uploaded_file)
        total_pages = len(reader.pages)
        st.info(f"‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ {total_pages} ‡∏´‡∏ô‡πâ‡∏≤")
        
        pages_input = st.text_input(
            "‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô 1,3,5-7)",
            help="‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ (,) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏¢‡∏Å ‡πÅ‡∏•‡∏∞‡∏Ç‡∏µ‡∏î (-) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á"
        )
        
        if pages_input and st.button("‡∏ï‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤"):
            try:
                pages_to_extract = []
                for part in pages_input.split(','):
                    if '-' in part:
                        start, end = map(int, part.split('-'))
                        pages_to_extract.extend(range(start, end + 1))
                    else:
                        pages_to_extract.append(int(part.strip()))
                
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤..."):
                    extracted_pdf = extract_pages(uploaded_file, pages_to_extract)
                    st.success(f"‚úÖ ‡∏ï‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤ {len(pages_to_extract)} ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    st.download_button(
                        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß",
                        data=extracted_pdf,
                        file_name="extracted.pdf",
                        mime="application/pdf"
                    )
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

# 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏´‡∏°‡πà
elif feature == "üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏´‡∏°‡πà":
    st.header("‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
    
    col1, col2 = st.columns(2)
    
    with col1:
        text_content = st.text_area(
            "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
            height=200,
            placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡πÉ‡∏ô PDF..."
        )
        
        font_choice = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏≠‡∏ô‡∏ï‡πå",
            ["Helvetica", "TH Sarabun PSK", "TH Sarabun New"]
        )
        
        font_size = st.slider("‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£", 10, 40, 16)
    
    with col2:
        uploaded_image = st.file_uploader(
            "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)",
            type=['png', 'jpg', 'jpeg'],
            key="create_image"
        )
        
        if uploaded_image:
            st.image(uploaded_image, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", width=300)
            
            img_x = st.number_input("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á X ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ", value=50)
            img_y = st.number_input("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Y ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ", value=500)
            image_position = (img_x, img_y)
        else:
            image_position = None
    
    if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á PDF"):
        if text_content or uploaded_image:
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PDF..."):
                pdf_output = create_pdf_with_content(
                    text_content,
                    font_choice,
                    font_size,
                    uploaded_image,
                    image_position
                )
                st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF",
                    data=pdf_output,
                    file_name="new_document.pdf",
                    mime="application/pdf"
                )
        else:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏≠‡∏¢‡πà‡∏≤‡∏á")

# 5. ‡∏´‡∏°‡∏∏‡∏ô PDF
elif feature == "üîÑ ‡∏´‡∏°‡∏∏‡∏ô PDF":
    st.header("‡∏´‡∏°‡∏∏‡∏ô‡∏´‡∏ô‡πâ‡∏≤ PDF")
    uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF", type="pdf", key="rotate")
    
    if uploaded_file:
        rotation = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô",
            [90, 180, 270],
            format_func=lambda x: f"{x}¬∞ (‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤)"
        )
        
        if st.button("‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏ü‡∏•‡πå"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏ü‡∏•‡πå..."):
                rotated_pdf = rotate_pdf(uploaded_file, rotation)
                st.success("‚úÖ ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏∏‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
                    data=rotated_pdf,
                    file_name="rotated.pdf",
                    mime="application/pdf"
                )

# 6. ‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤ PDF
elif feature == "üóëÔ∏è ‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤ PDF":
    st.header("‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å PDF")
    uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF", type="pdf", key="delete")
    
    if uploaded_file:
        reader = PdfReader(uploaded_file)
        total_pages = len(reader.pages)
        st.info(f"‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ {total_pages} ‡∏´‡∏ô‡πâ‡∏≤")
        
        pages_to_delete_input = st.text_input(
            "‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö (‡πÄ‡∏ä‡πà‡∏ô 2,4,6-8)",
            help="‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ (,) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏¢‡∏Å ‡πÅ‡∏•‡∏∞‡∏Ç‡∏µ‡∏î (-) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á"
        )
        
        if pages_to_delete_input and st.button("‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤"):
            try:
                pages_to_delete = []
                for part in pages_to_delete_input.split(','):
                    if '-' in part:
                        start, end = map(int, part.split('-'))
                        pages_to_delete.extend(range(start, end + 1))
                    else:
                        pages_to_delete.append(int(part.strip()))
                
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤..."):
                    result_pdf = delete_pages(uploaded_file, pages_to_delete)
                    remaining_pages = total_pages - len(pages_to_delete)
                    st.success(f"‚úÖ ‡∏•‡∏ö {len(pages_to_delete)} ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_pages} ‡∏´‡∏ô‡πâ‡∏≤")
                    st.download_button(
                        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß",
                        data=result_pdf,
                        file_name="deleted_pages.pdf",
                        mime="application/pdf"
                    )
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        <p>‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‚ù§Ô∏è ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Streamlit | ¬© 2025 PDF Manager Pro</p>
    </div>
    """,
    unsafe_allow_html=True
)
